generator client {
  provider      = "prisma-client-js"
  previewFeatures = ["driverAdapters"]
  output        = "../src/client"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

generator dbml {
  provider = "prisma-dbml-generator"
}

generator docs {
  provider = "node node_modules/prisma-docs-generator"
  output   = "../../docs"
}

model Appointment {
  id   String @id @default(cuid())
  uuid String @unique

  appointmentTypeId String
  appointmentType   AppointmentType @relation(fields: [appointmentTypeId], references: [id])

  patientId String
  patient   Patient @relation(fields: [patientId], references: [id])

  locationId String
  location   Location @relation(fields: [locationId], references: [id])

  providerId String
  provider   Provider @relation(fields: [providerId], references: [id])

  startDatetime DateTime
  endDatetime   DateTime

  voided   Boolean @default(false)
  voidedBy String

  dateVoided DateTime
  voidReason String

  creator         String
  dateCreated     DateTime
  lastChangedBy   String
  lastChangedDate DateTime

  @@unique([patientId, locationId, providerId])
  @@map("appointment")
}

model AppointmentType {
  id              String        @id @default(cuid())
  uuid            String        @unique
  name            String
  description     String
  duration        Int
  creator         String
  dateCreated     DateTime
  lastChangedBy   String
  lastChangedDate DateTime
  appointmentList Appointment[]

  @@map("appointment_type")
}

model Location {
  id              String        @id @default(cuid())
  uuid            String        @unique
  name            String
  description     String
  address1        String
  address2        String
  city            String
  stateProvince   String
  country         String
  postalCode      String
  latitude        Float
  longitude       Float
  creator         String
  dateCreated     DateTime
  lastChangedBy   String
  lastChangedDate DateTime
  appointmentList Appointment[]
  encounterList   Encounter[]

  @@map("location")
}

model Patient {
  id              String        @id @default(cuid())
  uuid            String        @unique
  givenName       String
  middleName      String
  familyName      String
  gender          String
  birthdate       DateTime
  dead            Boolean       @default(false)
  deathDate       DateTime
  causeOfDeath    String
  creator         String
  dateCreated     DateTime
  lastChangedBy   String
  lastChangedDate DateTime
  appointmentList Appointment[]
  encounterList   Encounter[]

  @@map("patient")
}

model Provider {
  id              String        @id @default(cuid())
  uuid            String        @unique
  name            String
  identifier      String
  description     String
  voided          Boolean       @default(false)
  voidedBy        String
  dateVoided      DateTime
  voidReason      String
  creator         String
  dateCreated     DateTime
  lastChangedBy   String
  lastChangedDate DateTime
  appointmentList Appointment[]
  encounterList   Encounter[]

  @@map("provider")
}

model Form {
  id                 String           @id @default(cuid())
  uuid               String           @unique
  name               String
  description        String
  version            String
  retired            Boolean          @default(false)
  retiredBy          String
  dateRetired        DateTime
  retiredReason      String
  creator            String
  dateCreated        DateTime
  lastChangedBy      String
  lastChangedDate    DateTime
  formEncounterList  FormEncounter[]
  formResourceList   FormResource[]
  formSubmissionList FormSubmission[]
  dield              Field?           @relation(fields: [fieldId], references: [id])
  fieldId            String?
  encounterList      Encounter[]

  @@map("form")
}

model FormEncounter {
  id              String    @id @default(cuid())
  uuid            String    @unique
  formId          String
  form            Form      @relation(fields: [formId], references: [id])
  encounterId     String
  encounter       Encounter @relation(fields: [encounterId], references: [id])
  creator         String
  dateCreated     DateTime
  lastChangedBy   String
  lastChangedDate DateTime

  @@map("form_encounter")
}

model FormResource {
  id              String   @id @default(cuid())
  uuid            String   @unique
  formId          String
  form            Form     @relation(fields: [formId], references: [id])
  resourceId      String
  resource        Resource @relation(fields: [resourceId], references: [id])
  creator         String
  dateCreated     DateTime
  lastChangedBy   String
  lastChangedDate DateTime

  @@map("form_resource")
}

model FormSubmission {
  id              String        @id @default(cuid())
  uuid            String        @unique
  formId          String
  form            Form          @relation(fields: [formId], references: [id])
  encounterId     String
  encounter       Encounter     @relation(fields: [encounterId], references: [id])
  submissionDate  DateTime
  creator         String
  dateCreated     DateTime
  lastChangedBy   String
  lastChangedDate DateTime
  fieldAnswerList FieldAnswer[]

  @@map("form_submission")
}

model Field {
  id              String        @id @default(cuid())
  uuid            String        @unique
  name            String
  description     String
  fieldType       String
  conceptId       String
  concept         Concept       @relation(fields: [conceptId], references: [id])
  creator         String
  dateCreated     DateTime
  lastChangedBy   String
  lastChangedDate DateTime
  formList        Form[]
  fieldAnswerList FieldAnswer[]
  fieldOptionList FieldOption[]

  @@map("field")
}

model FieldAnswer {
  id               String         @id @default(cuid())
  uuid             String         @unique
  formSubmissionId String
  formSubmission   FormSubmission @relation(fields: [formSubmissionId], references: [id])
  fieldId          String
  field            Field          @relation(fields: [fieldId], references: [id])
  value            String
  creator          String
  dateCreated      DateTime
  lastChangedBy    String
  lastChangedDate  DateTime

  @@map("field_answer")
}

model FieldOption {
  id              String   @id @default(cuid())
  uuid            String   @unique
  fieldId         String
  field           Field    @relation(fields: [fieldId], references: [id])
  name            String
  description     String
  creator         String
  dateCreated     DateTime
  lastChangedBy   String
  lastChangedDate DateTime

  @@map("field_option")
}

model Encounter {
  id                 String           @id @default(cuid())
  uuid               String           @unique
  encounterType      EncounterType    @relation(fields: [encounterTypeId], references: [id])
  encounterTypeId    String
  patientId          String
  patient            Patient          @relation(fields: [patientId], references: [id])
  locationId         String
  location           Location         @relation(fields: [locationId], references: [id])
  formId             String
  form               Form             @relation(fields: [formId], references: [id])
  providerId         String
  provider           Provider         @relation(fields: [providerId], references: [id])
  startDatetime      DateTime
  endDatetime        DateTime
  voided             Boolean          @default(false)
  voidedBy           String
  dateVoided         DateTime
  voidReason         String
  creator            String
  dateCreated        DateTime
  lastChangedBy      String
  lastChangedDate    DateTime
  formEncounterList  FormEncounter[]
  formSubmissionList FormSubmission[]
  obsList            Obs[]
  orderList          Order[]

  @@map("encounter")
}

model EncounterType {
  id              String      @id @default(cuid())
  uuid            String      @unique
  name            String
  description     String
  creator         String
  dateCreated     DateTime
  lastChangedBy   String
  lastChangedDate DateTime
  encounterList   Encounter[]

  @@map("encounter_type")
}

model Obs {
  id              String    @id @default(cuid())
  uuid            String    @unique
  conceptId       String
  concept         Concept   @relation(fields: [conceptId], references: [id])
  encounterId     String
  encounter       Encounter @relation(fields: [encounterId], references: [id])
  obsDatetime     DateTime
  valueDatetime   DateTime
  valueNumeric    Float
  valueText       String
  creator         String
  dateCreated     DateTime
  lastChangedBy   String
  lastChangedDate DateTime

  @@map("obs")
}

model Order {
  id               String          @id @default(cuid())
  uuid             String          @unique
  conceptId        String
  concept          Concept         @relation(fields: [conceptId], references: [id])
  encounterId      String
  encounter        Encounter       @relation(fields: [encounterId], references: [id])
  orderDatetime    DateTime
  instructions     String
  dosage           String
  route            String
  frequency        String
  asNeeded         Boolean         @default(false)
  prn              Boolean         @default(false)
  quantity         Int
  units            String
  creator          String
  dateCreated      DateTime
  lastChangedBy    String
  lastChangedDate  DateTime
  OrderFrequency   OrderFrequency? @relation(fields: [orderFrequencyId], references: [id])
  orderFrequencyId String?
  OrderRoute       OrderRoute?     @relation(fields: [orderRouteId], references: [id])
  orderRouteId     String?
  OrderType        OrderType?      @relation(fields: [orderTypeId], references: [id])
  orderTypeId      String?
  OrderUnit        OrderUnit?      @relation(fields: [orderUnitId], references: [id])
  orderUnitId      String?

  @@map("order")
}

model OrderFrequency {
  id              String   @id @default(cuid())
  uuid            String   @unique
  name            String
  description     String
  creator         String
  dateCreated     DateTime
  lastChangedBy   String
  lastChangedDate DateTime
  orderList       Order[]

  @@map("order_frequency")
}

model OrderRoute {
  id              String   @id @default(cuid())
  uuid            String   @unique
  name            String
  description     String
  creator         String
  dateCreated     DateTime
  lastChangedBy   String
  lastChangedDate DateTime
  orderList       Order[]

  @@map("order_route")
}

model OrderType {
  id              String   @id @default(cuid())
  uuid            String   @unique
  name            String
  description     String
  creator         String
  dateCreated     DateTime
  lastChangedBy   String
  lastChangedDate DateTime
  orderList       Order[]

  @@map("order_type")
}

model OrderUnit {
  id              String   @id @default(cuid())
  uuid            String   @unique
  name            String
  description     String
  creator         String
  dateCreated     DateTime
  lastChangedBy   String
  lastChangedDate DateTime
  orderList       Order[]

  @@map("order_unit")
}

model Concept {
  id                  String            @id @default(cuid())
  uuid                String            @unique
  name                String
  description         String
  dataType            String
  class               String
  isRetired           Boolean           @default(false)
  retiredBy           String
  dateRetired         DateTime
  retiredReason       String
  creator             String
  dateCreated         DateTime
  lastChangedBy       String
  lastChangedDate     DateTime
  metaList            ConceptAnswer[]   @relation("meta_concept")
  answerList          ConceptAnswer[]   @relation("answer_concept")
  fieldList           Field[]
  obsList             Obs[]
  orderList           Order[]
  ConceptClass        ConceptClass?     @relation(fields: [conceptClassId], references: [id])
  conceptClassId      String?
  ConceptDatatype     ConceptDatatype?  @relation(fields: [conceptDatatypeId], references: [id])
  conceptDatatypeId   String?
  conceptMap          ConceptMap?       @relation(fields: [conceptMapId], references: [id])
  conceptMapId        String?
  conceptNameList     ConceptName[]
  conceptNumericList  ConceptNumeric[]
  conceptProposalList ConceptProposal[]
  conceptSet          ConceptSet?       @relation(fields: [conceptSetId], references: [id])
  conceptSetId        String?
  conceptSource       ConceptSource?    @relation(fields: [conceptSourceId], references: [id])
  conceptSourceId     String?
  conceptWordList     ConceptWord[]

  @@map("concept")
}

model ConceptAnswer {
  id              String   @id @default(cuid())
  uuid            String   @unique
  conceptId       String
  concept         Concept  @relation(name: "meta_concept", fields: [conceptId], references: [id])
  answerConceptId String
  answerConcept   Concept  @relation(name: "answer_concept", fields: [answerConceptId], references: [id])
  creator         String
  dateCreated     DateTime
  lastChangedBy   String
  lastChangedDate DateTime

  @@map("concept_answer")
}

model ConceptClass {
  id              String    @id @default(cuid())
  uuid            String    @unique
  name            String
  description     String
  creator         String
  dateCreated     DateTime
  lastChangedBy   String
  lastChangedDate DateTime
  conceptList     Concept[]

  @@map("concept_class")
}

model ConceptDatatype {
  id              String    @id @default(cuid())
  uuid            String    @unique
  name            String
  description     String
  creator         String
  dateCreated     DateTime
  lastChangedBy   String
  lastChangedDate DateTime
  conceptList     Concept[]

  @@map("concept_data_type")
}

model ConceptMap {
  id              String    @id @default(cuid())
  uuid            String    @unique
  name            String
  description     String
  creator         String
  dateCreated     DateTime
  lastChangedBy   String
  lastChangedDate DateTime
  conceptList     Concept[]

  @@map("concept_map")
}

model ConceptName {
  id              String   @id @default(cuid())
  uuid            String   @unique
  conceptId       String
  concept         Concept  @relation(fields: [conceptId], references: [id])
  name            String
  locale          String
  creator         String
  dateCreated     DateTime
  lastChangedBy   String
  lastChangedDate DateTime

  @@map("concept_name")
}

model ConceptNumeric {
  id              String   @id @default(cuid())
  uuid            String   @unique
  conceptId       String
  concept         Concept  @relation(fields: [conceptId], references: [id])
  hiAbsolute      Float
  hiCritical      Float
  hiNormal        Float
  lowAbsolute     Float
  lowCritical     Float
  lowNormal       Float
  units           String
  creator         String
  dateCreated     DateTime
  lastChangedBy   String
  lastChangedDate DateTime

  @@map("concept_numeric")
}

model ConceptProposal {
  id              String   @id @default(cuid())
  uuid            String   @unique
  conceptId       String
  concept         Concept  @relation(fields: [conceptId], references: [id])
  name            String
  description     String
  creator         String
  dateCreated     DateTime
  lastChangedBy   String
  lastChangedDate DateTime

  @@map("concept_proposal")
}

model ConceptSet {
  id              String    @id @default(cuid())
  uuid            String    @unique
  name            String
  description     String
  creator         String
  dateCreated     DateTime
  lastChangedBy   String
  lastChangedDate DateTime
  conceptList     Concept[]

  @@map("concept_set")
}

model ConceptSource {
  id              String    @id @default(cuid())
  uuid            String    @unique
  name            String
  description     String
  creator         String
  dateCreated     DateTime
  lastChangedBy   String
  lastChangedDate DateTime
  conceptList     Concept[]

  @@map("concept_source")
}

model ConceptWord {
  id              String   @id @default(cuid())
  uuid            String   @unique
  conceptId       String
  concept         Concept  @relation(fields: [conceptId], references: [id])
  word            String
  locale          String
  creator         String
  dateCreated     DateTime
  lastChangedBy   String
  lastChangedDate DateTime

  @@map("concept_word")
}

model Resource {
  id               String         @id @default(cuid())
  uuid             String         @unique
  name             String
  description      String
  creator          String
  dateCreated      DateTime
  lastChangedBy    String
  lastChangedDate  DateTime
  formResourceList FormResource[]

  @@map("resource")
}

model BlogPost {
  id String @id @default(cuid())

  title   String
  content String
  context Json

  authorId String
  author   BlogPostAuthor @relation(fields: [authorId], references: [id])

  spaceTimeCoordinatesId String               @unique
  spaceTimeCoordinates   SpaceTimeCoordinates @relation(fields: [spaceTimeCoordinatesId], references: [id])

  tagArrowList BlogPostTagArrow[]

  @@map("blog_post")
}

model BlogPostTag {
  id         String  @id @default(cuid())
  name       String
  descriptor String?

  postArrowList BlogPostTagArrow[]

  @@map("blog_post_tag")
}

model BlogPostTagArrow {
  id String @id @default(cuid())

  postId String
  post   BlogPost @relation(fields: [postId], references: [id])

  tagId String
  tag   BlogPostTag @relation(fields: [tagId], references: [id])

  @@unique([postId, tagId])
  @@map("blog_post_tag_arrow")
}

model BlogPostAuthor {
  id           String     @id @default(cuid())
  name         String
  blogPostList BlogPost[]

  @@map("blog_post_author")
}

model SpaceTimeCoordinates {
  id        String @id @default(cuid())
  latitude  Float
  longitude Float
  startTime Float
  pauseTime Float?
  stopTime  Float
  timezone  String

  blogPostId String    @db.Uuid
  BlogPost   BlogPost?

  @@map("space_time_coordinates")
}
